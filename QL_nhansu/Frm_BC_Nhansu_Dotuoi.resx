<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="btnBaoCao.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAABGdBTUEAALGOfPtRkwAAACBjSFJNAACH
        DwAAjA8AAP1SAACBQAAAfXkAAOmLAAA85QAAGcxzPIV3AAAKOWlDQ1BQaG90b3Nob3AgSUNDIHByb2Zp
        bGUAAEjHnZZ3VFTXFofPvXd6oc0wAlKG3rvAANJ7k15FYZgZYCgDDjM0sSGiAhFFRJoiSFDEgNFQJFZE
        sRAUVLAHJAgoMRhFVCxvRtaLrqy89/Ly++Osb+2z97n77L3PWhcAkqcvl5cGSwGQyhPwgzyc6RGRUXTs
        AIABHmCAKQBMVka6X7B7CBDJy82FniFyAl8EAfB6WLwCcNPQM4BOB/+fpFnpfIHomAARm7M5GSwRF4g4
        JUuQLrbPipgalyxmGCVmvihBEcuJOWGRDT77LLKjmNmpPLaIxTmns1PZYu4V8bZMIUfEiK+ICzO5nCwR
        3xKxRoowlSviN+LYVA4zAwAUSWwXcFiJIjYRMYkfEuQi4uUA4EgJX3HcVyzgZAvEl3JJS8/hcxMSBXQd
        li7d1NqaQffkZKVwBALDACYrmcln013SUtOZvBwAFu/8WTLi2tJFRbY0tba0NDQzMv2qUP91829K3NtF
        ehn4uWcQrf+L7a/80hoAYMyJarPziy2uCoDOLQDI3fti0zgAgKSobx3Xv7oPTTwviQJBuo2xcVZWlhGX
        wzISF/QP/U+Hv6GvvmckPu6P8tBdOfFMYYqALq4bKy0lTcinZ6QzWRy64Z+H+B8H/nUeBkGceA6fwxNF
        hImmjMtLELWbx+YKuGk8Opf3n5r4D8P+pMW5FonS+BFQY4yA1HUqQH7tBygKESDR+8Vd/6NvvvgwIH55
        4SqTi3P/7zf9Z8Gl4iWDm/A5ziUohM4S8jMX98TPEqABAUgCKpAHykAd6ABDYAasgC1wBG7AG/iDEBAJ
        VgMWSASpgA+yQB7YBApBMdgJ9oBqUAcaQTNoBcdBJzgFzoNL4Bq4AW6D+2AUTIBnYBa8BgsQBGEhMkSB
        5CEVSBPSh8wgBmQPuUG+UBAUCcVCCRAPEkJ50GaoGCqDqqF6qBn6HjoJnYeuQIPQXWgMmoZ+h97BCEyC
        qbASrAUbwwzYCfaBQ+BVcAK8Bs6FC+AdcCXcAB+FO+Dz8DX4NjwKP4PnEIAQERqiihgiDMQF8UeikHiE
        j6xHipAKpAFpRbqRPuQmMorMIG9RGBQFRUcZomxRnqhQFAu1BrUeVYKqRh1GdaB6UTdRY6hZ1Ec0Ga2I
        1kfboL3QEegEdBa6EF2BbkK3oy+ib6Mn0K8xGAwNo42xwnhiIjFJmLWYEsw+TBvmHGYQM46Zw2Kx8lh9
        rB3WH8vECrCF2CrsUexZ7BB2AvsGR8Sp4Mxw7rgoHA+Xj6vAHcGdwQ3hJnELeCm8Jt4G749n43PwpfhG
        fDf+On4Cv0CQJmgT7AghhCTCJkIloZVwkfCA8JJIJKoRrYmBRC5xI7GSeIx4mThGfEuSIemRXEjRJCFp
        B+kQ6RzpLuklmUzWIjuSo8gC8g5yM/kC+RH5jQRFwkjCS4ItsUGiRqJDYkjiuSReUlPSSXK1ZK5kheQJ
        yeuSM1J4KS0pFymm1HqpGqmTUiNSc9IUaVNpf+lU6RLpI9JXpKdksDJaMm4ybJkCmYMyF2TGKQhFneJC
        YVE2UxopFykTVAxVm+pFTaIWU7+jDlBnZWVkl8mGyWbL1sielh2lITQtmhcthVZKO04bpr1borTEaQln
        yfYlrUuGlszLLZVzlOPIFcm1yd2WeydPl3eTT5bfJd8p/1ABpaCnEKiQpbBf4aLCzFLqUtulrKVFS48v
        vacIK+opBimuVTyo2K84p6Ss5KGUrlSldEFpRpmm7KicpFyufEZ5WoWiYq/CVSlXOavylC5Ld6Kn0Cvp
        vfRZVUVVT1Whar3qgOqCmrZaqFq+WpvaQ3WCOkM9Xr1cvUd9VkNFw08jT6NF454mXpOhmai5V7NPc15L
        Wytca6tWp9aUtpy2l3audov2Ax2yjoPOGp0GnVu6GF2GbrLuPt0berCehV6iXo3edX1Y31Kfq79Pf9AA
        bWBtwDNoMBgxJBk6GWYathiOGdGMfI3yjTqNnhtrGEcZ7zLuM/5oYmGSYtJoct9UxtTbNN+02/R3Mz0z
        llmN2S1zsrm7+QbzLvMXy/SXcZbtX3bHgmLhZ7HVosfig6WVJd+y1XLaSsMq1qrWaoRBZQQwShiXrdHW
        ztYbrE9Zv7WxtBHYHLf5zdbQNtn2iO3Ucu3lnOWNy8ft1OyYdvV2o/Z0+1j7A/ajDqoOTIcGh8eO6o5s
        xybHSSddpySno07PnU2c+c7tzvMuNi7rXM65Iq4erkWuA24ybqFu1W6P3NXcE9xb3Gc9LDzWepzzRHv6
        eO7yHPFS8mJ5NXvNelt5r/Pu9SH5BPtU+zz21fPl+3b7wX7efrv9HqzQXMFb0ekP/L38d/s/DNAOWBPw
        YyAmMCCwJvBJkGlQXlBfMCU4JvhI8OsQ55DSkPuhOqHC0J4wybDosOaw+XDX8LLw0QjjiHUR1yIVIrmR
        XVHYqLCopqi5lW4r96yciLaILoweXqW9KnvVldUKq1NWn46RjGHGnIhFx4bHHol9z/RnNjDn4rziauNm
        WS6svaxnbEd2OXuaY8cp40zG28WXxU8l2CXsTphOdEisSJzhunCruS+SPJPqkuaT/ZMPJX9KCU9pS8Wl
        xqae5Mnwknm9acpp2WmD6frphemja2zW7Fkzy/fhN2VAGasyugRU0c9Uv1BHuEU4lmmfWZP5Jiss60S2
        dDYvuz9HL2d7zmSue+63a1FrWWt78lTzNuWNrXNaV78eWh+3vmeD+oaCDRMbPTYe3kTYlLzpp3yT/LL8
        V5vDN3cXKBVsLBjf4rGlpVCikF84stV2a9021DbutoHt5turtn8sYhddLTYprih+X8IqufqN6TeV33za
        Eb9joNSydP9OzE7ezuFdDrsOl0mX5ZaN7/bb3VFOLy8qf7UnZs+VimUVdXsJe4V7Ryt9K7uqNKp2Vr2v
        Tqy+XeNc01arWLu9dn4fe9/Qfsf9rXVKdcV17w5wD9yp96jvaNBqqDiIOZh58EljWGPft4xvm5sUmoqb
        PhziHRo9HHS4t9mqufmI4pHSFrhF2DJ9NProje9cv+tqNWytb6O1FR8Dx4THnn4f+/3wcZ/jPScYJ1p/
        0Pyhtp3SXtQBdeR0zHYmdo52RXYNnvQ+2dNt293+o9GPh06pnqo5LXu69AzhTMGZT2dzz86dSz83cz7h
        /HhPTM/9CxEXbvUG9g5c9Ll4+ZL7pQt9Tn1nL9tdPnXF5srJq4yrndcsr3X0W/S3/2TxU/uA5UDHdavr
        XTesb3QPLh88M+QwdP6m681Lt7xuXbu94vbgcOjwnZHokdE77DtTd1PuvriXeW/h/sYH6AdFD6UeVjxS
        fNTws+7PbaOWo6fHXMf6Hwc/vj/OGn/2S8Yv7ycKnpCfVEyqTDZPmU2dmnafvvF05dOJZ+nPFmYKf5X+
        tfa5zvMffnP8rX82YnbiBf/Fp99LXsq/PPRq2aueuYC5R69TXy/MF72Rf3P4LeNt37vwd5MLWe+x7ys/
        6H7o/ujz8cGn1E+f/gUDmPP8usTo0wAAAAlwSFlzAAALDQAACw0B7QfALAAACiFJREFUWEe1l3lQVFcW
        xm8vNDuIBpBVdhEiskMrSwNhB0FsFkEBQfZVQXEJKhOiSdAIgQgIaEQUUYyC4sgiQ0BAQMUtNWnHykxq
        ktRUJWOSqiSTAPrNeR3JGFQy88e8qls0r/v1+X3fWe5tBoA9u/YHB7M3ab0XFMRaJd56jY4OEbTKGhzs
        j37g5HT4pNg9v0Uijmz1E7u2+YmNz4R6KX0Y7M3OR/ix86G+rN3Xg53zWcXaJatYm6sTO+3kwFrslrMm
        c3PWZEHL1JRtM9ZlqXpaLF1/IftNcA5kn0TC9vn48Krc3TOr7Ow+6dq9e+p2Rwdkw8P4dGwMf7l6FfdP
        n34yXnnou/6SbX/t2rRx6Lw08uTZEP93TnmvzG12XB7evMLWqdlumcFxK3OVE0st2XErS9ZgZMQaTU1Y
        k4kJ27FkMQXXYlkGLwDIFCqwbAUF0TYVlc/3LFqEtz09Z4bK35j+8kzb1BeXu6a+Gh+b/u7hw8c/Pnr0
        ZOqnnzD9BPh5eho//vADvvniC3x59y4e9vTMTB47+s1QefmDntycwQvR0lOnvL32N9vbZzWYmIRl6r+i
        G6OjydbpLnjegWTGWApjokIVVVmRSAQpfaQ1MgJ/K92Jj7cU4E5ezpPJ3OzHt/JyHt/asnl6ctfO6fsV
        70w9aGqa+rzr0tTXNyamv//ss5mp778HscmvGVqPvv4aD+7dw9myMpjyWKYyj8c0aD2XgjgCiOfxRLkq
        KrISZWVsoI+clq7Fw72luFeyFbeLi3BzcyEm8nIxmpmBoZQU9CckoC8mBj2RkeiJiHxyZc2axz2xsTMD
        ScnTfWVlj4dGR9Hd04PugQGcrqyCGWPpChRHhc0DUKCqKtulooIkAjgVFYlPdu3A5JZC3CjIw1hONoYz
        MjCYmor+5GT0rd+Ay5Fr8AepFKVBIbgQGo62wGC0eklwKDAItU2N6O3txZ+GhnDuvWqYE4AiAai9CCCG
        3oglBwrV1GR71dWRRgAnVofj/ratv6jOysJQWhoGNqbgamIieuITcDF8NXr2H0DBoUYUuIpxniBOvhaA
        Fk8CCA7BsZYWfPTRR+Cc6Kytmx9g3dMUFGtoyPZpaSGLAI6HhGCysPA/qpOS0ZuwHn+MW4fOsNXo3rwF
        HbcfIr64HJWe3mj19ccHXr446roStZFRGKAOGiL1I+PjuPh7ANEEEEMOFKmry/YtWCAHaAwMkNs+QPnm
        VHeT6ssxsbi4Jgrt4REY77uKuIISREoCcWyVJwX3QeNKT9Q7uuIwpWZg+BoGBwflDnxYUzO/A1GUl7U8
        vmizmrqsXFMT6QRQ5/cahsn2Xsr1FVLdJY1BJwVv8/HDUG0D3q1vhFPgGuQ7OOMDD280iD1R57YSh1c4
        oSYiEn1k/9X+fjlAR23t/ABh5EA4OZD3tAY4gBpvCaiif1EdJcV5+tKz/oE4k7wJfddG4RObDImjGBUO
        Tmhw90Ctixg1Tq6otLFD9eoIHD1xAu3nzmFichJdDQ3zA0QQQCTXhgRQqqoqL8LKVR7oWRePDsrnOSq4
        s1Rkxzx9MNjVh7yyt2HvEYBMK2tUUdBaZ3dUObjgoJ0j3rK0kQM0nzqFzs5O3Ln/Ma40Nc0PEEoAYQSQ
        SXNgJ7VhPAFUuIvRRcrbQ8KovULQLF6Fs6XlaLnUA8ewOIST0r02y3GIAlfaO6NiuQP2cfdMrVBFwBO3
        JzExcQOTd+/JASzma0N/AggggBQlJVmRoqJ8Er7l7ILzVGyt/kFo8fZB3WvBuDZyAxu27oWr2AcFFlYo
        JYADnGrbFShfthx7rGyww9gMh8LCMX7rFsapA27euYNL9Ufkg0hEcVRfNAf86A1/AlivqCjLUVBAFAGU
        2zvgDKdc4oc6Utl+5DjOjN7DyuhNiLW0Rgmt161tsZ9Uly21RanlMuywsEaRoQneDQ3D2I0bGKZWvE5/
        Lxyuhel8AG4EIGY8UZyCSJYhFIJSgj2v2uEk9XaTsxtqYjdg5Kt/IbemDatWOKPEYinyzaywmxTvtbLF
        Lg7IfCmKzCyRq2+MChpEgxS8rr4e/dSKnfSXm4SqFEeT1nN7gT3dcyCAtQoKshSBAJQS7Fpmi2YPCSrJ
        4o6ufpz++B9wW52AVApSbG6FXFMLvP5U9Vb6f7OpJfJNLJChZ4hy/wA5QD0FHrh2DZeoCzgHXjqK3eUO
        MJFUqCBbz+fDlwC2L12GBnvq6dRsjDyaQdK+ekhsVmA32Zy+xAx5BLD9qepCep1rYo4sup+qa4C93Ayh
        c8T169fltXCRQOZNgQcBeFENRJMD6whAQgBbSekhZzF6x++hbujPcPENRz4F4tQnGS6Rv95Cn8mnwNkU
        OIPWJmNTJOnoyQFGxybkNcDVwgUaRPMCeFFlSghAKhTKaCTDmwBydRbjSNF2DP5zBqsLyxBOyveQYi5I
        oqEx8sjuWdXpdC/VyAQpRkuQSM9xACMjY/K9YHYU/xdFyEQRQoFMSgCeBJBEbVZx8F2UnriMldR2xaSU
        UxxvYCx3IHuJOak2lQOlUPCNFJxbcgBfP3kNXLlyBU3Hj+PD99+HyXxd4EIpcKMiDBcIZZEUnNKBAtrz
        fQKCsFzsjVRqtRKyPI2CRVORbaSAs6pnAz8LUOZH+8XoiPw8cKK1FR11dVgy34HEmlKwjABCnwIk2Nsj
        J78ASpoLsXThKygm5ZzlCaReqmcgV/ys6mchZh0YpgIcpY3o9v37uHjkyK8AohcNImpB5sg5wOc/kNIk
        3J6fDzsnF6iqaSKZrC+gxSmOouCcA1yu5yp/1oHXfXwxdvOmHIDbjDrq62DEWBodxn655v4uMCEAM8ZT
        oP7/tFAsRmpGJgSqGlhlYIRCCp5JFZ5IQcN19bBO//cBdkkk8gl4jWbAKI3j9upqLGYsczb+cwCzb+ir
        qATsLNz8rYWNLQwXaiOHm2xP1ccRDAfAdcDvObDTyxtcCgboQHqOfl8cLC6GAWNvUhxD+TCc64Cbm5i5
        uLiy6Ni44LUxsTNKahozFou002zU1BN9tLVbpfqGf+fsjyX1acYvz/9sF2z39EIvHUa6u7vlAAeKijiA
        GgpOzUD70VyArKxslpubJygqKp4wIKtVNRYcZNz5XSCkyhDpCgUCz4UixQ22GppvBOvo9icYGn3LgXBt
        OBcoiVza7umJ7r4+XKVfVBUHDnzq8uqr5So8Hg3bl9RAfHwCy8jI9AigY7WSqvpdkaKSmlAoNBAIhY58
        vsCBLxBQCn8tIaYsEBgZKytHuyxYUBWuo3sz0cDo53QCSiegjYv1sZvmwMm2tp+Cg4NreDwe7cRzrrkO
        VFdXs/Ly8hoLK+sZvkAYKuDzLehBRx6Pb8Tj85We+4Lf3uCrCwTW5srKKZ5aWidjdXQ/izMxebhIWzuA
        PsZ/4bNzAby8vJX8AwKHSOkWPp9vRsuIALjN63++hDymSQ8az/vgXAAtLS09bR2dIK5AKDB3cPm/Xv8G
        eVwcyz06tlwAAAAASUVORK5CYII=
</value>
  </data>
</root>